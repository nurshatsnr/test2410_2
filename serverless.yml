service: comp-codecommit-test
useDotenv: true
frameworkVersion: ">=3.38.0"

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-domain-manager
  - serverless-dynamo-stream-plugin
  - serverless-plugin-log-retention
  - serverless-deployment-bucket
custom:
  accountId: !Ref AWS::AccountId
  pEnvironment: ${opt:stage, self:provider.stage}

  autoswagger:
    title: 'CodeStudio Child Project'
    typefiles: [ './src/types/requests.d.ts', './src/types/responses.d.ts' ]
    generateSwaggerOnDeploy: true
    basePath: /${env:DOMAIN_NAME_PATH}
    schemes: [ 'http', 'https' ]
    apiKeyHeaders: [ 'accesstoken', 'x-api-key', 'Content-Type' ]
    host: ${env:DOMAIN_NAME}
    apiType: 'http'
    swaggerPath: "swagger"

  webpack:
    webpackConfig: "webpack.config.js" # Name of webpack configuration file
    includeModules: false # Node modules configuration for packaging
    packager: "yarn" # Packager that will be used to package your external modules
  dynamodb:
    stages:
      - dev
    # UNCOMMENT  FOR LOCAL
    # start:
    #   port: 8000
    #   inMemory: true
    #   heapInitial: 200m
    #   heapMax: 1g
    #   migrate: true
    #   seed: true
    #   convertEmptyValues: true
    # UNCOMMENT ENDS FOR LOCAL
  customDomain:
    domainName: ${env:DOMAIN_NAME}
    basePath: ${env:DOMAIN_NAME_PATH}
    stage: ${self:provider.stage}
    createRoute53Record: true
provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs20.x
  #profile: manualverify-api
  apiGateway:
    apiKeys:
      - ${env:env}-${env:API_KEY}
  versionFunctions: false
  timeout: 30 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  websocketsApiRouteSelectionExpression: $request.body.action
  logs:
    websocket:
      level: ERROR

  deploymentBucket:
    name: ${env:DEPLOYMENT_BUCKET}
    maxPreviousDeploymentArtifacts: 5
  deploymentPrefix: ${env:PROJECT_NM}/${env:env}

  # environment:
  #   DYNAMODB_TABLE: homework

  iamRoleStatements: ${file(./serverless-config/roles.yml)}

functions: ${file(./serverless-config/functions.yml)}
# resources:
#   Resources: ${file(./serverless-config/dbresources.yml)}
  #  ${file(./serverless-config/setup-cognito.yml)}
